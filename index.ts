/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * WordPress is open source software you can use to create a beautiful website, blog, or app.
 */
export interface WP {
  Comment?: WP_Comment;
  Error?: WP_Error;
  Error_With_Error?: WP_Error_With_Error;
  Error_Without_Error?: WP_Error_Without_Error;
  Post?: WP_Post;
  User?: WP_User;
  REST_API?: {
    Comment?: WP_REST_API_Comment;
    Post?: WP_REST_API_Post;
    Term?: WP_REST_API_Term;
    User?: WP_REST_API_User;
    Error?: WP_REST_API_Error;
  };
}
/**
 * Core class used to organize comments as instantiated objects with defined members.
 */
export interface WP_Comment {
  /**
   * Comment ID.
   *
   * A numeric string, for compatibility reasons.
   */
  comment_ID: string;
  /**
   * ID of the post the comment is associated with.
   *
   * A numeric string, for compatibility reasons.
   */
  comment_post_ID: string;
  /**
   * Comment author name.
   */
  comment_author: string;
  /**
   * Comment author email address.
   */
  comment_author_email: string;
  /**
   * Comment author URL.
   */
  comment_author_url: string;
  /**
   * Comment author IP address (IPv4 format).
   */
  comment_author_IP: string;
  /**
   * Comment date in YYYY-MM-DD HH:MM:SS format.
   */
  comment_date: string;
  /**
   * Comment GMT date in YYYY-MM-DD HH::MM:SS format.
   */
  comment_date_gmt: string;
  /**
   * Comment content.
   */
  comment_content: string;
  /**
   * Comment karma count.
   *
   * A numeric string, for compatibility reasons.
   */
  comment_karma: string;
  /**
   * Comment approval status.
   */
  comment_approved: string;
  /**
   * Comment author HTTP user agent.
   */
  comment_agent: string;
  /**
   * Comment type.
   */
  comment_type: string;
  /**
   * Parent comment ID.
   *
   * A numeric string, for compatibility reasons.
   */
  comment_parent: string;
  /**
   * Comment author ID.
   *
   * A numeric string, for compatibility reasons.
   */
  user_id: string;
}
/**
 * WordPress Error class.
 *
 * Container for checking for WordPress errors and error messages. Many
 * core WordPress functions pass this class in the event of an error.
 */
export interface WP_Error {
  /**
   * Stores the list of errors.
   */
  errors: [] | WP_Error_Messages;
  /**
   * Stores the list of data for error codes.
   */
  error_data: [] | WP_Error_Data;
}
/**
 * The messages for the errors contained within the error object.
 *
 * Each error is represented by a property keyed by the error code, and containing an array of message strings for that
 * code. Any given error code usually contains only one message, but can contain more.
 */
export interface WP_Error_Messages {
  [k: string]: string[];
}
/**
 * The data for the errors contained within the error object.
 *
 * Each error is represented by a property keyed by the error code, and containing error data for that code. Any given
 * error code can contain only one piece of error data, but the data can be of any type.
 */
export interface WP_Error_Data {
  [k: string]: any;
}
/**
 * WordPress Error class.
 *
 * Represents a WP_Error object that contains at least one error.
 */
export interface WP_Error_With_Error {
  /**
   * Stores the list of errors.
   */
  errors: WP_Error_Messages;
  /**
   * Stores the list of data for error codes.
   */
  error_data: WP_Error_Data;
}
/**
 * Empty WordPress Error class.
 *
 * Represents a WP_Error object that contains no errors.
 */
export interface WP_Error_Without_Error {
  /**
   * Stores the list of errors.
   */
  errors: [];
  /**
   * Stores the list of data for error codes.
   */
  error_data: [];
}
/**
 * Core class used to implement the WP_Post object.
 */
export interface WP_Post {
  /**
   * Post ID.
   */
  ID: number;
  /**
   * ID of post author.
   *
   * A numeric string, for compatibility reasons.
   */
  post_author: string;
  /**
   * The post's local publication time.
   */
  post_date: string;
  /**
   * The post's GMT publication time.
   */
  post_date_gmt: string;
  /**
   * The post's content.
   */
  post_content: string;
  /**
   * The post's title.
   */
  post_title: string;
  /**
   * The post's excerpt.
   */
  post_excerpt: string;
  /**
   * The post's status.
   */
  post_status: WP_Post_Status_Name | string;
  /**
   * Whether comments are allowed.
   */
  comment_status: string;
  /**
   * Whether pings are allowed.
   */
  ping_status: string;
  /**
   * The post's password in plain text.
   */
  post_password: "" | string;
  /**
   * The post's slug.
   */
  post_name: string;
  /**
   * URLs queued to be pinged.
   */
  to_ping: "" | string;
  /**
   * URLs that have been pinged.
   */
  pinged: "" | string;
  /**
   * The post's local modified time.
   */
  post_modified: string;
  /**
   * The post's GMT modified time.
   */
  post_modified_gmt: string;
  /**
   * A utility DB field for post content.
   */
  post_content_filtered: "" | string;
  /**
   * ID of a post's parent post.
   */
  post_parent: number;
  /**
   * The unique identifier for a post, not necessarily a URL, used as the feed GUID.
   */
  guid: string;
  /**
   * A field used for ordering posts.
   */
  menu_order: number;
  /**
   * The post's type, like post or page.
   */
  post_type: WP_Post_Type_Name | string;
  /**
   * An attachment's mime type.
   */
  post_mime_type: string;
  /**
   * Cached comment count.
   *
   * A numeric string, for compatibility reasons.
   */
  comment_count: string;
  /**
   * Stores the post object's sanitization level.
   *
   * Does not correspond to a DB field.
   */
  filter: "raw" | "edit" | "db" | "display";
}
/**
 * Core class used to implement the WP_User object.
 */
export interface WP_User {
  /**
   * The user's ID.
   */
  ID: number;
  /**
   * All capabilities the user has, including individual and role based.
   */
  allcaps: WP_User_Caps;
  /**
   * User metadata option name.
   */
  cap_key: string;
  /**
   * The individual capabilities the user has been given.
   *
   * See the allcaps property for a complete list of caps that the user has.
   */
  caps: WP_User_Caps;
  /**
   * User data container.
   */
  data: WP_User_Data;
  /**
   * The filter context applied to user data fields.
   */
  filter: WP_User_Filter_Context;
  /**
   * The roles the user is part of.
   */
  roles: (WP_User_Role_Name | string)[];
}
/**
 * A dictionary of user capabilities.
 *
 * Property names represent a capability name and boolean values represent whether the user has that capability.
 */
export interface WP_User_Caps {
  [k: string]: boolean;
}
/**
 * User data container.
 */
export interface WP_User_Data {
  /**
   * The user's ID.
   *
   * A numeric string, for compatibility reasons.
   */
  ID?: string;
  /**
   * The user's deletion status. Only used on Multisite.
   */
  deleted?: "0" | "1";
  /**
   * The user's full display name.
   */
  display_name?: string;
  /**
   * The user's spam status. Only used on Multisite.
   */
  spam?: "0" | "1";
  /**
   * The user's activation key. Be careful not to expose this in your application.
   */
  user_activation_key?: string;
  /**
   * The user's email address.
   */
  user_email?: string;
  /**
   * The user's login name.
   */
  user_login?: string;
  /**
   * The user's name as used in their author archive URL slug.
   */
  user_nicename?: string;
  /**
   * The one-way hash of the user's password.
   */
  user_pass?: string;
  /**
   * The user's registration date.
   */
  user_registered?: string;
  /**
   * The user's status. This field does not appear to be used by WordPress core.
   */
  user_status?: "0";
  /**
   * The user's URL.
   */
  user_url?: string;
  [k: string]: unknown;
}
/**
 * A comment object in a REST API context.
 */
export interface WP_REST_API_Comment {
  /**
   * Unique identifier for the object.
   */
  id: number;
  /**
   * The ID of the user object, if author was a user.
   */
  author: number;
  /**
   * Email address for the object author. Only present when using the 'edit' context.
   */
  author_email?: string;
  /**
   * IP address for the object author. Only present when using the 'edit' context.
   */
  author_ip?: string;
  /**
   * Display name for the object author.
   */
  author_name: string;
  /**
   * URL for the object author.
   */
  author_url: string;
  /**
   * User agent for the object author. Only present when using the 'edit' context.
   */
  author_user_agent?: string;
  /**
   * The content for the object.
   */
  content: {
    /**
     * Content for the object, as it exists in the database. Only present when using the 'edit' context.
     */
    raw?: string;
    /**
     * HTML content for the object, transformed for display.
     */
    rendered?: string;
  };
  /**
   * The date the object was published, in the site's timezone.
   */
  date: string;
  /**
   * The date the object was published, as GMT.
   */
  date_gmt: string;
  /**
   * URL to the object.
   */
  link: string;
  /**
   * The ID for the parent of the object.
   */
  parent: number;
  /**
   * The ID of the associated post object.
   */
  post: number;
  /**
   * State of the object.
   */
  status: WP_Comment_Status_Name | string;
  /**
   * Type of Comment for the object.
   */
  type: WP_Comment_Type_Name | string;
  /**
   * Avatar URLs for the object author.
   */
  author_avatar_urls?: {
    /**
     * Avatar URL with image size of 24 pixels.
     */
    "24"?: string;
    /**
     * Avatar URL with image size of 48 pixels.
     */
    "48"?: string;
    /**
     * Avatar URL with image size of 96 pixels.
     */
    "96"?: string;
    /**
     * Avatar URL with image of another size.
     */
    [k: string]: string;
  };
  /**
   * Meta fields.
   */
  meta: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * A post object in a REST API context.
 */
export interface WP_REST_API_Post {
  /**
   * The date the object was published, in the site's timezone.
   */
  date: string | null;
  /**
   * The date the object was published, as GMT.
   */
  date_gmt: string | null;
  /**
   * The globally unique identifier for the object.
   */
  guid: {
    /**
     * GUID for the object, as it exists in the database. Only present when using the 'edit' context.
     */
    raw?: string;
    /**
     * GUID for the object, transformed for display.
     */
    rendered: string;
  };
  /**
   * Unique identifier for the object.
   */
  id: number;
  /**
   * URL to the object.
   */
  link: string;
  /**
   * The date the object was last modified, in the site's timezone.
   */
  modified: string;
  /**
   * The date the object was last modified, as GMT.
   */
  modified_gmt: string;
  /**
   * An alphanumeric identifier for the object unique to its type.
   */
  slug: string;
  /**
   * A named status for the object.
   */
  status: WP_Post_Status_Name | string;
  /**
   * Type of Post for the object.
   */
  type: WP_Post_Type_Name | string;
  /**
   * A password to protect access to the content and excerpt. Only present when using the 'edit' context.
   */
  password?: string;
  /**
   * Permalink template for the object. Only present when using the 'edit' context and the post type is public.
   */
  permalink_template?: string;
  /**
   * Slug automatically generated from the object title. Only present when using the 'edit' context and the post type is public.
   */
  generated_slug?: string;
  /**
   * The ID for the parent of the object. Only present for hierarchical post types.
   */
  parent?: number;
  /**
   * The title for the object.
   */
  title: {
    /**
     * Title for the object, as it exists in the database. Only present when using the 'edit' context.
     */
    raw?: string;
    /**
     * HTML title for the object, transformed for display.
     */
    rendered: string;
  };
  /**
   * The content for the object.
   */
  content: {
    /**
     * Content for the object, as it exists in the database. Only present when using the 'edit' context.
     */
    raw?: string;
    /**
     * HTML content for the object, transformed for display.
     */
    rendered: string;
    /**
     * Version of the content block format used by the object. Only present when using the 'edit' context.
     */
    block_version?: number;
    /**
     * Whether the content is protected with a password.
     */
    protected: boolean;
  };
  /**
   * The ID for the author of the object.
   */
  author: number;
  /**
   * The excerpt for the object.
   */
  excerpt: {
    /**
     * Excerpt for the object, as it exists in the database. Only present when using the 'edit' context.
     */
    raw?: string;
    /**
     * HTML excerpt for the object, transformed for display.
     */
    rendered: string;
    /**
     * Whether the excerpt is protected with a password.
     */
    protected: boolean;
  };
  /**
   * The ID of the featured media for the object.
   */
  featured_media?: number;
  /**
   * Whether or not comments are open on the object.
   */
  comment_status: WP_Post_Comment_Status_Name;
  /**
   * Whether or not the object can be pinged.
   */
  ping_status: WP_Post_Comment_Status_Name;
  /**
   * The format for the object.
   */
  format?: WP_Post_Format_Name;
  /**
   * Meta fields.
   */
  meta: {
    [k: string]: unknown;
  };
  /**
   * Whether or not the object should be treated as sticky. Only present for the 'post' post type.
   */
  sticky?: boolean;
  /**
   * The theme file to use to display the object.
   */
  template?: string;
  /**
   * The terms assigned to the object in the category taxonomy. Only present for post types that support categories.
   */
  categories?: number[];
  /**
   * The terms assigned to the object in the post_tag taxonomy. Only present for post types that support tags.
   */
  tags?: number[];
  [k: string]: unknown;
}
/**
 * A taxonomy term object in a REST API context.
 */
export interface WP_REST_API_Term {
  /**
   * Unique identifier for the term.
   */
  id: number;
  /**
   * Number of published posts for the term.
   */
  count: number;
  /**
   * HTML description of the term.
   */
  description: string;
  /**
   * URL of the term.
   */
  link: string;
  /**
   * HTML title for the term.
   */
  name: string;
  /**
   * An alphanumeric identifier for the term unique to its type.
   */
  slug: string;
  /**
   * Type attribution for the term.
   */
  taxonomy: string;
  /**
   * The parent term ID. Only present for hierarchical taxonomies.
   */
  parent?: number;
  /**
   * Meta fields.
   */
  meta: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * A user object in a REST API context.
 */
export interface WP_REST_API_User {
  /**
   * Unique identifier for the user.
   */
  id: number;
  /**
   * Login name for the user. Only present when using the 'edit' context.
   */
  username?: string;
  /**
   * Display name for the user.
   */
  name: string;
  /**
   * First name for the user. Only present when using the 'edit' context.
   */
  first_name?: string;
  /**
   * Last name for the user. Only present when using the 'edit' context.
   */
  last_name?: string;
  /**
   * The email address for the user. Only present when using the 'edit' context.
   */
  email?: string;
  /**
   * URL of the user.
   */
  url: string;
  /**
   * Description of the user.
   */
  description: string;
  /**
   * Author URL of the user.
   */
  link: string;
  /**
   * Locale for the user. Only present when using the 'edit' context.
   */
  locale?: string;
  /**
   * The nickname for the user. Only present when using the 'edit' context.
   */
  nickname?: string;
  /**
   * An alphanumeric identifier for the user.
   */
  slug: string;
  /**
   * Registration date for the user. Only present when using the 'edit' context.
   */
  registered_date?: string;
  /**
   * Roles assigned to the user. Only present when using the 'edit' context.
   */
  roles?: (WP_User_Role_Name | string)[];
  /**
   * All capabilities assigned to the user. Only present when using the 'edit' context.
   */
  capabilities?: WP_User_Caps;
  /**
   * Any extra capabilities assigned to the user. Only present when using the 'edit' context.
   */
  extra_capabilities?: WP_User_Caps;
  /**
   * Avatar URLs for the user.
   */
  avatar_urls?: {
    /**
     * Avatar URL with image size of 24 pixels.
     */
    "24": string;
    /**
     * Avatar URL with image size of 48 pixels.
     */
    "48": string;
    /**
     * Avatar URL with image size of 96 pixels.
     */
    "96": string;
    /**
     * Avatar URL with image of another size.
     */
    [k: string]: string;
  };
  /**
   * Meta fields.
   */
  meta: {
    [k: string]: unknown;
  };
  [k: string]: unknown;
}
/**
 * A REST API error response.
 */
export interface WP_REST_API_Error {
  /**
   * The error message code.
   */
  code: string;
  /**
   * The error message text.
   */
  message: string;
  /**
   * Extra data about the error
   */
  data: {
    /**
     * The HTTP status code
     */
    status?: number;
    [k: string]: unknown;
  };
  /**
   * Additional error objects, if there are any.
   */
  additional_errors?: WP_REST_API_Error[];
}

export enum WP_Post_Status_Name {
  publish = "publish",
  draft = "draft",
  auto_draft = "auto-draft",
  inherit = "inherit",
  pending = "pending",
  future = "future",
  trash = "trash",
  private = "private",
}
export enum WP_Post_Type_Name {
  post = "post",
  page = "page",
  attachment = "attachment",
  revision = "revision",
  nav_menu_item = "nav_menu_item",
  custom_css = "custom_css",
  customize_changeset = "customize_changeset",
  oembed_cache = "oembed_cache",
  user_request = "user_request",
  wp_block = "wp_block",
}
export enum WP_User_Filter_Context {
  attribute = "attribute",
  db = "db",
  display = "display",
  edit = "edit",
  js = "js",
  raw = "raw",
}
export enum WP_User_Role_Name {
  administrator = "administrator",
  editor = "editor",
  author = "author",
  contributor = "contributor",
  subscriber = "subscriber",
}
export enum WP_Comment_Status_Name {
  approved = "approved",
  unapproved = "unapproved",
  spam = "spam",
  trash = "trash",
}
export enum WP_Comment_Type_Name {
  comment = "comment",
  pingback = "pingback",
  trackback = "trackback",
}
export enum WP_Post_Comment_Status_Name {
  open = "open",
  closed = "closed",
}
export enum WP_Post_Format_Name {
  aside = "aside",
  audio = "audio",
  chat = "chat",
  gallery = "gallery",
  image = "image",
  link = "link",
  quote = "quote",
  standard = "standard",
  status = "status",
  video = "video",
}
